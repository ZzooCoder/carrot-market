// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User{
  id Int @id @default(autoincrement())
  name String? @default("Anon")
  phone String? @unique
  email String? @unique
  avatar String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Tokens Token[]
  Products Product[]
  Favorites Favorite[]
  Posts Post[]
  Answers Answer[]
  Wonderings Wondering[]
  WrittenReviews Review[] @relation(name: "WrittenReviews")
  RecivedReviews Review[] @relation(name: "RecivedReviews")
  Sales Sale[]
  Pulchases Purchase[]
  Streams Stream[]
  LiveChats LiveChat[]
  Sellers ChatRoom[] @relation(name: "seller")
  Buyers ChatRoom[] @relation(name: "buyer")
  PrivateChats PrivateChat[]
}

model Token{
  id Int @id @default(autoincrement())
  payload  String @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Product{
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  image String?
  name String
  price Int
  description  String @db.MediumText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Favorites Favorite[]
  Sales Sale[]
  Pulchases Purchase[]
  ChatRooms ChatRoom[]
  traded Boolean @default(false)
}
model Post{
  id Int @id @default(autoincrement())
  question String @db.MediumText
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  latitude Float?
  longitude Float?
  Answers Answer[]
  Wonderings Wondering[]
}
model Answer{
  id Int @id @default(autoincrement())
  answer String @db.MediumText
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Wondering{
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review{
  id Int @id @default(autoincrement())
  review String @db.MediumText
  createdBy User @relation(name: "WrittenReviews", fields: [createdById], references: [id], onDelete: Cascade)
  createdById Int
  createdFor User @relation(name: "RecivedReviews", fields: [createdForId], references: [id], onDelete: Cascade)
  createdForId Int
  score Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Sale{
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId Int
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Purchase{
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId Int
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Favorite{
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId Int
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model Stream {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  title String
  name        String
  description String    @db.MediumText
  price       Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  live Boolean @default(true)
  LiveChats    LiveChat[]
  streamId String
  streamUrl String
  streamKey String
}

model LiveChat {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  liveMessage   String   @db.MediumText
  stream    Stream   @relation(fields: [streamId], references: [id], onDelete: Cascade)
  streamId  Int
}

model ChatRoom {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  seller User @relation(name: "seller", fields: [sellerId], references: [id], onDelete: Cascade)
  sellerId Int
  buyer User @relation(name: "buyer", fields: [buyerId], references: [id], onDelete: Cascade)
  buyerId Int
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  PrivateChats PrivateChat[]
}
model PrivateChat{
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  chatRoom ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  chatRoomId Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  chat String @db.MediumText
}